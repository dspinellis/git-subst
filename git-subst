#!/bin/sh
#
# git subcommand to perform RE replacements
#
# Copyright 2020-2023 Diomidis Spinellis
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set -e

# Display usage information and exit
usage()
{
  echo "Usage: $0 [-c context-RE] [-n] search-pattern replacement-string" 1>&2
  cat <<\EOF 1>&2
Replace the specified regular expression with a string.

  -c context   Perform the change only on lines matching context regexp.
  -n           Only show what replacements will be performed.

Examples:
  git subst old new          # Change old to new
  git subst -c ^// old new   # Change old to new only on lines starting with //
  git subst '\.Body' .body               # . RE character is escaped
  git subst '\<statuscode\>' statusCode  # Matches whole words only
  git subst '\.method\(\)' '.field'      # .method() becomes .field
  git subst '\.custom\(([^)]*)\)' '.\1'  # .custom(foo) becomes .foo
EOF
  exit 1
}

context=''

# Process command-line arguments
while getopts "c:n" opt; do
  case $opt in
    c)
      # Make context as /context/ with any slashes escaped
      context=$(echo "$OPTARG" | sed 's|/|\\/|;s|^|/|;s|$|/|')
      ;;
    n)
      show_only=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

shift "$((OPTIND-1))"

if [ "$#" -ne 2 ]; then
  usage
fi

from="$1"
to="$2"

# Obtain an in-place replacement option compatible with GNU and BSD sed
if sed --quiet q /dev/null 2>/dev/null ; then
  # GNU
  inplace=-i
else
  # BSD (and macOS)
  inplace='-i ""'
fi

# Obtain the xargs option for not executing 0 args
# GNU requires this, while on macOS and FreeBSD this is the default behavior.
# FreeBSD supports this option as a no-op for compatibility.
if xargs -r </dev/null 2>/dev/null ; then
  skip_empty=-r
fi

# FreeBSD sed supports -E
# GNU sed on Debian and CygWin supports -E -r and --regexp extended
# It recommends -E for portability
# But Amazon Linux doesn't suport -E!
if sed -E </dev/null 2>/dev/null ; then
  regexp_extended=-E
else
  regexp_extended=-r
fi

# A rare separation character for sed (alert; ASCII 7)
S=$(printf '\a')

if [ -n "$show_only" ] ; then
  git stash push -q -m 'Pre git-subst stash'
  git stash apply -q
fi

# Perform the specified replacement (-I excludes binary files)
git grep -I --extended-regexp --null --name-only -- "$from" |
  xargs $skip_empty -0 sed $regexp_extended $inplace "${context}s$S$from$S$to${S}g"

if [ -n "$show_only" ] ; then
  git diff 'stash@{0}'
  git stash push -q -m 'Post git-subst stash'
  git stash pop -q 'stash@{1}'
  git stash drop -q
fi
