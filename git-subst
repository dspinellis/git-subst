#!/bin/sh
#
# git subcommand to perform RE replacements
#
# Copyright 2020-2023 Diomidis Spinellis
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set -e

if [ -z "$1" ] ; then
  echo "Usage: $0 search-pattern replacement-string" 1>&2
  cat <<\EOF 1>&2

Examples:
git subst old new
git subst '\.Body' .body  # . RE character is escaped
git subst '\<statuscode\>' statusCode  # Matches whole words only
git subst '\.custom\(([^)]*)\)' '.\1'  # .custom(foo) becomes .foo
EOF
  exit 1
fi

# Obtain an in-place replacement option compatible with GNU and BSD sed
if sed --quiet q /dev/null 2>/dev/null ; then
  # GNU
   nplace=-i
else
  # BSD (and macOS)
  inplace='-i ""'
fi

# Obtain the xargs option for not executing 0 args
# GNU requires this, while on macOS and FreeBSD this is the default behavior.
# FreeBSD supports this option as a no-op for compatibility.
if xargs -r </dev/null 2>/dev/null ; then
  skip_empty=-r
fi

# FreeBSD sed supports -E
# GNU sed on Debian and CygWin supports -E -r and --regexp extended
# It recommends -E for portability
# But Amazon Linux doesn't suport -E!
if sed -E </dev/null 2>/dev/null ; then
  regexp_extended=-E
else
  regexp_extended=-r
fi

# A rare separation character for sed (alert; ASCII 7)
S=$(printf '\a')

git grep --extended-regexp --null --name-only -- "$1" |
  xargs $skip_empty -0 sed $regexp_extended $inplace "s$S$1$S$2${S}g"
